"""
Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence
whose values do not exceed four million, find the sum of the even-valued terms.
"""
from typing import List, Callable

MAX_VALUE = 4_000_000

FIBONACCI_DICT = {
    0: 0,
    1: 1,
}


def fibonacci(n: int) -> int:
    if n <= 1:
        return n
    elif n in FIBONACCI_DICT:
        return FIBONACCI_DICT[n]
    else:
        FIBONACCI_DICT[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return FIBONACCI_DICT[n]


def populate_fibonacci_dict_until_max_value_reached() -> None:
    number = 2
    while FIBONACCI_DICT[number - 1] + FIBONACCI_DICT[number - 2] < MAX_VALUE:
        fibonacci(number)
        number += 1


def get_fibonacci_terms_on(condition: Callable[[int], bool] = lambda _: True) -> List[int]:
    return [term for term in FIBONACCI_DICT.values() if condition(term)]


if __name__ == "__main__":
    populate_fibonacci_dict_until_max_value_reached()
    fibonacci_terms = get_fibonacci_terms_on(condition=lambda value: value % 2 == 0)
    print("By considering the terms in the Fibonacci sequence"
          "whose values do not exceed four million, "
          f"the sum of the even-valued terms is {sum(fibonacci_terms)}")
